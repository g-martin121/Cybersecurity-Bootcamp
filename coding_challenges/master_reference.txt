#!/usr/bin/env python3
"""
Comprehensive Python System/File Tools Reference
Works on Linux (Kali), macOS, and Windows.
Perfect for cybersecurity labs.
"""
import os
import stat
import sys
import platform
import shutil
import subprocess
import pathlib
import glob
import fnmatch
import datetime
import time
import hashlib
import secrets
import uuid
import json
import csv
import configparser
import getpass
import socket
import tempfile
import logging
import traceback
import zipfile
import tarfile
# Unix-only modules
HAS_UNIX_TOOLS = False
if platform.system() in ["Linux", "Darwin"]:
    import pwd
    import grp
    import fcntl
    import resource
    import pty
    HAS_UNIX_TOOLS = True
# Windows-only modules
if platform.system() == "Windows":
    import msvcrt
    import winreg
# --- PATH UTILITIES (os.path) ---
# os.path.exists(path)          -> Does file/folder exist?
# os.path.isfile(path)          -> Is it a regular file?
# os.path.isdir(path)           -> Is it a directory?
# os.path.getsize(path)         -> File size in bytes
# os.path.getmtime(path)        -> Last modification time (epoch)
# os.path.getatime(path)        -> Last access time (epoch)
# os.path.getctime(path)        -> Creation time (Windows) / Metadata change (Unix)
# os.path.abspath(path)         -> Absolute path
# os.path.basename(path)        -> Filename from path
# os.path.dirname(path)         -> Directory portion
# os.path.splitext(path)        -> Split filename and extension
# os.path.relpath(path, start)  -> Relative path from start
# os.path.join(a, b)            -> Join paths safely
# os.path.isabs(path)           -> Is path absolute?
# --- OS MODULE ---
# os.listdir(path)              -> List files/folders
# os.makedirs(path, exist_ok=True) -> Create directories recursively
# os.remove(path)               -> Delete a file
# os.rename(src, dst)           -> Rename file/folder
# os.environ                    -> Environment variables
# os.getcwd() / os.chdir(path)  -> Current / Change working directory
# --- STAT MODULE ---
# stat.filemode(st_mode)        -> Permissions as string (e.g. -rwxr-xr-x)
# stat.S_ISUID/S_ISGID/S_ISVTX  -> SUID/SGID/Sticky bits
# stat.S_IRUSR/IWUSR/IXUSR      -> Owner read/write/execute
# stat.S_IRGRP/IWGRP/IXGRP      -> Group permissions
# stat.S_IROTH/IWOTH/IXOTH      -> Other permissions
# st.st_uid                     -> User ID (Unix)
# st.st_gid                     -> Group ID (Unix)
# st.st_mode                    -> Raw permission bits
# st.st_size                    -> File size in bytes
# --- PWD & GRP MODULES (Unix only) ---
# pwd.getpwuid(uid).pw_name     -> Username
# grp.getgrgid(gid).gr_name     -> Group name
# --- SYS MODULE ---
# sys.argv                      -> Command line args
# sys.exit(code)                -> Exit program
# sys.version                   -> Python version
# sys.platform                  -> Platform identifier (e.g. win32, linux, darwin)
# --- PLATFORM MODULE ---
# platform.system()             -> OS name
# platform.release()            -> OS release
# platform.version()            -> Detailed OS version
# platform.machine()            -> CPU architecture (e.g. x86_64, arm64)
# --- SHUTIL MODULE ---
# shutil.copy(src, dst)         -> Copy a file
# shutil.copytree(src, dst)     -> Copy entire directory tree
# shutil.move(src, dst)         -> Move or rename
# shutil.rmtree(path)           -> Delete directory tree
# shutil.disk_usage(path)       -> Disk usage: total, used, free
# --- SUBPROCESS MODULE ---
# subprocess.run([...])         -> Run command
# subprocess.run([...], check=True) -> Raise exception on failure
# subprocess.check_output([...]) -> Capture command output
# subprocess.Popen([...])       -> Interactive processes
# --- PATHLIB MODULE ---
# pathlib.Path("file").exists() -> Check existence
# pathlib.Path.cwd()            -> Current directory
# pathlib.Path("file").stat()   -> File metadata
# --- GLOB MODULE ---
# glob.glob("*.py")             -> List files with pattern
# glob.iglob("*.txt")           -> Iterator for matching files
# --- FNMATCH MODULE ---
# fnmatch.fnmatch("file.log", "*.log") -> Match pattern
# fnmatch.filter(files, "*.txt")       -> Filter list with pattern
# --- DATETIME MODULE ---
# datetime.datetime.now()       -> Current date/time
# datetime.date.today()         -> Current date
# datetime.timedelta(days=7)    -> Time delta
# datetime.datetime.fromtimestamp(ts) -> Convert epoch -> datetime
# .strftime("%Y-%m-%d %H:%M:%S") -> Format datetime as string
# --- TIME MODULE ---
# time.time()                   -> Seconds since epoch
# time.sleep(5)                 -> Pause execution
# time.ctime()                  -> Human-readable timestamp
# time.localtime()              -> Local time struct
# time.gmtime()                 -> UTC time struct
# time.perf_counter()           -> High-resolution timer
# --- HASHLIB MODULE ---
# hashlib.md5(b"data").hexdigest()     -> MD5
# hashlib.sha256(b"data").hexdigest()  -> SHA256
# hashlib.file_digest(file, "sha1")    -> File hash (Python 3.11+)
# --- SECRETS MODULE ---
# secrets.token_hex(16)         -> Secure random hex string
# secrets.choice(seq)           -> Secure random choice
# --- UUID MODULE ---
# uuid.uuid4()                  -> Generate random UUID
# --- JSON MODULE ---
# json.load(file)               -> Read JSON
# json.dump(obj, file)          -> Write JSON
# --- CSV MODULE ---
# csv.reader(file)              -> Read CSV
# csv.writer(file)              -> Write CSV
# --- CONFIGPARSER MODULE ---
# configparser.ConfigParser()   -> Work with INI configs
# --- GETPASS MODULE ---
# getpass.getpass()             -> Secure password input
# --- SOCKET MODULE ---
# socket.gethostname()          -> Hostname
# socket.gethostbyname(host)    -> Resolve host to IP
# socket.socket()               -> Create network socket
# --- TEMPFILE MODULE ---
# tempfile.NamedTemporaryFile() -> Temp file
# tempfile.gettempdir()         -> Temp directory
# --- LOGGING MODULE ---
# logging.debug("msg")          -> Debug log
# logging.info("msg")           -> Info log
# logging.error("msg")          -> Error log
# --- TRACEBACK MODULE ---
# traceback.print_exc()         -> Print last exception
# --- ZIPFILE MODULE ---
# zipfile.ZipFile("a.zip")      -> Read/write ZIP
# --- TARFILE MODULE ---
# tarfile.open("a.tar.gz")      -> Read/write TAR
# --- FCNTL MODULE (Unix only) ---
# fcntl.flock(file, fcntl.LOCK_EX) -> File locking
# --- RESOURCE MODULE (Unix only) ---
# resource.getrlimit(resource.RLIMIT_NOFILE) -> Process limits
# --- PTY MODULE (Unix only) ---
# pty.openpty()                 -> Create a new pseudo-terminal
# --- MSVCRT MODULE (Windows only) ---
# msvcrt.getch()                -> Read single keypress
# msvcrt.locking(fd, mode, n)   -> File locking
# --- WINREG MODULE (Windows only) ---
# winreg.OpenKey()              -> Access Windows registry
# winreg.QueryValueEx()         -> Query registry value
8:21
#!/usr/bin/env python3
"""
Comprehensive Python System/File Tools Reference
Works on Linux (Kali), macOS, and Windows.
Perfect for cybersecurity labs.
"""
import os
import stat
import sys
import platform
import shutil
import subprocess
import datetime   # For timestamp conversions
import pathlib    # For modern OO-style path handling
import glob       # For filename pattern matching
import fnmatch    # For shell-style matching
import time       # For epoch timestamps and sleeping
import hashlib    # For hashing (MD5, SHA1, SHA256, etc.)
import secrets    # For secure random tokens
import uuid       # For universally unique identifiers
import json       # For JSON parsing/writing
import csv        # For CSV file parsing/writing
import configparser # For .ini-style config files
import getpass    # For secure password input
import socket     # For networking utilities
import tempfile   # For creating temporary files
import logging    # For logging/debugging
import traceback  # For exception tracebacks
import zipfile    # For working with ZIP archives
import tarfile    # For working with TAR archives
# Unix-only modules
HAS_UNIX_TOOLS = False
if platform.system() in ["Linux", "Darwin"]:
    import pwd
    import grp
    import fcntl
    import resource
    import pty
    HAS_UNIX_TOOLS = True
# Windows-only modules
if platform.system() == "Windows":
    import msvcrt
    import winreg
# --- PATH UTILITIES (os.path) ---
# os.path.exists(path)       -> Does file/folder exist?
# os.path.isfile(path)       -> Is it a regular file?
# os.path.isdir(path)        -> Is it a directory?
# os.path.getsize(path)      -> File size in bytes
# os.path.abspath(path)      -> Absolute path
# os.path.basename(path)     -> Filename from path
# os.path.dirname(path)      -> Directory portion
# os.path.splitext(path)     -> Split filename and extension
# os.path.relpath(path, start) -> Relative path from start
# os.path.join(a, b)         -> Join paths safely
# os.path.isabs(path)        -> Is path absolute?
# os.path.getmtime(path)     -> Last modification time (epoch seconds)
# os.path.getatime(path)     -> Last access time (epoch seconds)
# os.path.getctime(path)     -> Creation time (Windows) or metadata change (Unix)
# --- DATETIME MODULE ---
# datetime.datetime.fromtimestamp(epoch) -> Convert epoch to datetime
# dt.strftime("%Y-%m-%d %H:%M:%S")      -> Format datetime as string
# datetime.datetime.now()               -> Current local time
# datetime.datetime.utcnow()            -> Current UTC time
# --- OS MODULE ---
# os.listdir(path)            -> List files/folders
# os.makedirs(path, exist_ok=True) -> Create directories recursively
# os.remove(path)             -> Delete a file
# os.rename(src, dst)         -> Rename file/folder
# os.environ                  -> Environment variables
# os.getcwd() / os.chdir(path) -> Current / Change working directory
# --- STAT MODULE ---
# stat.filemode(st_mode)      -> Permissions as string (e.g. -rwxr-xr-x)
# stat.S_ISUID, S_ISGID, S_ISVTX -> SUID/SGID/Sticky bits
# stat.S_IRUSR/IWUSR/IXUSR   -> Owner read/write/execute
# stat.S_IRGRP/IWGRP/IXGRP   -> Group permissions
# stat.S_IROTH/IWOTH/IXOTH   -> Other permissions
# --- PWD & GRP MODULES (Unix only) ---
# pwd.getpwuid(uid).pw_name  -> Username
# grp.getgrgid(gid).gr_name  -> Group name
# --- SYS MODULE ---
# sys.argv                   -> Command line args
# sys.exit(code)             -> Exit program
# sys.version                -> Python version
# --- PLATFORM MODULE ---
# platform.system()          -> OS name
# platform.release()         -> OS release
# platform.version()         -> Detailed OS version
# --- SHUTIL MODULE ---
# shutil.copy(src, dst)      -> Copy a file
# shutil.copytree(src, dst)  -> Copy entire directory tree
# shutil.move(src, dst)      -> Move or rename
# shutil.rmtree(path)        -> Delete directory tree
# shutil.disk_usage(path)    -> Disk usage: total, used, free
# --- SUBPROCESS MODULE ---
# subprocess.run([...])           -> Run command
# subprocess.run([...], check=True) -> Raise exception on failure
# subprocess.check_output([...])  -> Capture command output
# subprocess.Popen([...])         -> Interactive processes
# --- PATHLIB MODULE ---
# pathlib.Path(path).exists()     -> Check if path exists
# pathlib.Path(path).is_file()    -> Is it a file?
# pathlib.Path(path).is_dir()     -> Is it a directory?
# pathlib.Path(path).iterdir()    -> Iterate directory contents
# --- TIME MODULE ---
# time.time()                     -> Seconds since epoch
# time.ctime()                    -> Human-readable timestamp
# time.sleep(seconds)              -> Pause execution
# --- HASHLIB / SECRETS / UUID ---
# hashlib.md5(b"data").hexdigest() -> MD5 hash
# hashlib.sha256(b"data").hexdigest() -> SHA256 hash
# secrets.token_hex(16)            -> Secure random hex string
# uuid.uuid4()                     -> Random UUID
# --- JSON / CSV / CONFIGPARSER ---
# json.loads(s)                    -> Parse JSON string
# json.dumps(obj)                   -> Convert object to JSON string
# csv.reader(file)                  -> Read CSV file
# csv.writer(file).writerow(row)    -> Write CSV row
# configparser.ConfigParser()       -> Read/write .ini configs
# --- GETPASS / SOCKET / TEMPFILE ---
# getpass.getpass("Prompt:")       -> Secure password input
# socket.gethostname()             -> Local hostname
# tempfile.NamedTemporaryFile()     -> Temporary file
# --- LOGGING / TRACEBACK ---
# logging.debug("msg")              -> Debug message
# traceback.print_exc()             -> Print last exception
# --- ZIPFILE / TARFILE ---
# zipfile.ZipFile("f.zip", "w")     -> Create/extract ZIP
# tarfile.open("f.tar.gz", "w:gz")  -> Create/extract TAR
# -------------------- DEMO SECTION --------------------
# Target path for demo
path = "/bin" if platform.system() != "Windows" else "C:\\Windows\\System32"
print("\n[File Listing Demo]")
for item in os.listdir(path):
    item_path = os.path.join(path, item)
    if os.path.isfile(item_path):
        size = os.path.getsize(item_path)
        st = os.stat(item_path)
        permissions = stat.filemode(st.st_mode)
        # File times
        modified = datetime.datetime.fromtimestamp(os.path.getmtime(item_path)).strftime("%Y-%m-%d %H:%M:%S")
        owner = "N/A"
        group = "N/A"
        if HAS_UNIX_TOOLS:
            owner = pwd.getpwuid(st.st_uid).pw_name
            group = grp.getgrgid(st.st_gid).gr_name
        suid_flag = "SUID" if (st.st_mode & stat.S_ISUID) else ""
        print(f"{item:25} {size:10} bytes  {permissions}  {owner}:{group} {suid_flag}  Modified: {modified}")
print("\n[Directory Listing Demo]")
for item in os.listdir(path):
    item_path = os.path.join(path, item)
    if os.path.isdir(item_path):
        print(f"[DIR] {item}")
print("\n[System Info Demo]")
print("Python version :", sys.version.split()[0])
print("OS             :", platform.system(), platform.release())
print("Current dir    :", os.getcwd())
if shutil.disk_usage(path):
    total, used, free = shutil.disk_usage(path)
    print(f"Disk usage     : Total={total//1_000_000_000}GB, Used={used//1_000_000_000}GB, Free={free//1_000_000_000}GB")
print("\n[Subprocess Demo]")
cmd = ["ls", "-l", path] if platform.system() != "Windows" else ["dir"]
result = subprocess.run(cmd, capture_output=True, text=True, shell=True)
for line in result.stdout.splitlines()[:5]:  # show first 5 lines
    print(line)
print("\n[Path Utilities Demo]")
sample_file = os.path.join(path, item)
print("Absolute path     :", os.path.abspath(sample_file))
print("Filename          :", os.path.basename(sample_file))
print("Directory         :", os.path.dirname(sample_file))
print("Splitext          :", os.path.splitext(sample_file))
print("Is absolute?      :", os.path.isabs(sample_file))
print("Relative to cwd   :", os.path.relpath(sample_file))
print("Last modified     :", datetime.datetime.fromtimestamp(os.path.getmtime(sample_file)).strftime("%Y-%m-%d %H:%M:%S"))